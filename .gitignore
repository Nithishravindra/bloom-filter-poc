// package main

// import (
// 	"fmt"
// 	"hash"
// 	"math/rand"

// 	"github.com/google/uuid"
// 	"github.com/spaolacci/murmur3"
// )

// var mHasherFns []hash.Hash32

// func init() {
// 	mHasherFns = make([]hash.Hash32, 0)
// 	for i := 0; i < 100; i++ {
// 		mHasherFns = append(mHasherFns, murmur3.New32WithSeed(uint32(rand.Uint32())))
// 	}
// }

// func murmurhash(key string, size int32, hashFnIdx int) int32 {
// 	mHasherFns[hashFnIdx].Write([]byte(key))
// 	result := mHasherFns[hashFnIdx].Sum32() % uint32(size)
// 	mHasherFns[hashFnIdx].Reset()
// 	return int32(result)
// }

// type BloomFilter struct {
// 	Filter []uint8
// 	Size   int32
// }

// func NewBloomFilter(size int32) *BloomFilter {
// 	return &BloomFilter{
// 		Filter: make([]uint8, size),
// 		Size:   size,
// 	}
// }

// func (b *BloomFilter) Add(key string, noHashFn int) {
// 	for i := 0; i < noHashFn; i++ {
// 		idx := murmurhash(key, b.Size, i)
// 		aIdx := idx / 8
// 		bIdx := idx % 8
// 		b.Filter[aIdx] = b.Filter[aIdx] | (1 << bIdx)
// 	}
// }

// func (b *BloomFilter) Exists(key string, noHashFn int) bool {
// 	for i := 0; i < noHashFn; i++ {
// 		idx := murmurhash(key, b.Size, i)
// 		aIdx := idx / 8
// 		bIdx := idx % 8
// 		exist := b.Filter[aIdx]&(1<<bIdx) > 0
// 		if !exist {
// 			return false
// 		}
// 	}
// 	return true
// }

// func (b *BloomFilter) Print() {
// 	fmt.Println(b.Filter)
// }

// func main() {
// 	dataset := make([]string, 0)
// 	dataset_exists := make(map[string]bool)
// 	dataset_notexists := make(map[string]bool)

// 	for i := 0; i < 500; i++ {
// 		u := uuid.New()
// 		dataset = append(dataset, u.String())
// 		dataset_exists[u.String()] = true
// 	}

// 	for i := 0; i < 500; i++ {
// 		u := uuid.New()
// 		dataset = append(dataset, u.String())
// 		dataset_notexists[u.String()] = true
// 	}

// 	for j := 1; j <= len(mHasherFns); j++ {
// 		bloom := NewBloomFilter(10000) // Choose a fixed size for the Bloom filter
// 		for key := range dataset_exists {
// 			bloom.Add(key, j)
// 		}
// 		falsePositive := 0
// 		for _, key := range dataset {
// 			exists := bloom.Exists(key, j)
// 			if exists {
// 				if _, ok := dataset_notexists[key]; ok {
// 					falsePositive++
// 				}
// 			}
// 		}
// 		fmt.Println(float64(falsePositive) / float64(len(dataset_notexists)))
// 	}
// }